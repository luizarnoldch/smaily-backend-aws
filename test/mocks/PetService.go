// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	model "main/src/domain/model"

	mock "github.com/stretchr/testify/mock"
)

// PetService is an autogenerated mock type for the PetService type
type PetService struct {
	mock.Mock
}

// CreatePet provides a mock function with given fields: _a0
func (_m *PetService) CreatePet(_a0 *model.PetRequest) (*model.PetResponse, error) {
	ret := _m.Called(_a0)

	var r0 *model.PetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.PetRequest) (*model.PetResponse, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*model.PetRequest) *model.PetResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.PetRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePet provides a mock function with given fields: petId
func (_m *PetService) DeletePet(petId string) (*model.PetResponse, error) {
	ret := _m.Called(petId)

	var r0 *model.PetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.PetResponse, error)); ok {
		return rf(petId)
	}
	if rf, ok := ret.Get(0).(func(string) *model.PetResponse); ok {
		r0 = rf(petId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(petId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllPets provides a mock function with given fields:
func (_m *PetService) GetAllPets() ([]model.PetResponse, error) {
	ret := _m.Called()

	var r0 []model.PetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.PetResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.PetResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPetService creates a new instance of PetService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPetService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PetService {
	mock := &PetService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
